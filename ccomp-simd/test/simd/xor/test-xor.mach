_mm_set_epi32() {
	stack(4, int) = BX
	stack(8, int) = SI
	stack(12, int) = DI
	DI = param(0, int)
	CX = param(4, int)
	BX = param(8, int)
	SI = param(12, int)
	int32[stack(16)] = SI
	int32[stack(20)] = BX
	int32[stack(24)] = CX
	int32[stack(28)] = DI
	xmm0 = int128[stack(16)]
	BX = stack(4, int)
	SI = stack(8, int)
	DI = stack(12, int)
	return
}

_mm_set_epi8() {
	stack(4, int) = BX
	stack(8, int) = SI
	stack(12, int) = DI
	stack(16, int) = BP
	CX = param(0, int)
	stack(64, int) = CX
	CX = param(4, int)
	stack(72, int) = CX
	CX = param(8, int)
	stack(60, int) = CX
	BP = param(12, int)
	DI = param(16, int)
	SI = param(20, int)
	CX = param(24, int)
	stack(68, int) = CX
	CX = param(28, int)
	stack(44, int) = CX
	CX = param(32, int)
	stack(32, int) = CX
	CX = param(36, int)
	stack(56, int) = CX
	BX = param(40, int)
	CX = param(44, int)
	stack(52, int) = CX
	CX = param(48, int)
	stack(48, int) = CX
	CX = param(52, int)
	stack(36, int) = CX
	CX = param(56, int)
	stack(40, int) = CX
	AX = param(60, int)
	int8s[stack(80)] = AX
	DX = stack(40, int)
	int8s[stack(81)] = DX
	AX = stack(36, int)
	int8s[stack(82)] = AX
	CX = stack(48, int)
	int8s[stack(83)] = CX
	DX = stack(52, int)
	int8s[stack(84)] = DX
	int8s[stack(85)] = BX
	AX = stack(56, int)
	int8s[stack(86)] = AX
	CX = stack(32, int)
	int8s[stack(87)] = CX
	DX = stack(44, int)
	int8s[stack(88)] = DX
	CX = stack(68, int)
	int8s[stack(89)] = CX
	int8s[stack(90)] = SI
	int8s[stack(91)] = DI
	int8s[stack(92)] = BP
	DX = stack(60, int)
	int8s[stack(93)] = DX
	AX = stack(72, int)
	int8s[stack(94)] = AX
	AX = stack(64, int)
	int8s[stack(95)] = AX
	xmm0 = int128[stack(80)]
	BX = stack(4, int)
	SI = stack(8, int)
	DI = stack(12, int)
	BP = stack(16, int)
	return
}

_mm_storeu_si128() {
	AX = param(0, int)
	xmm0 = param(16, t128)
	AX = builtin "__builtin_ia32_storedqu" <>(AX, xmm0)
	return
}

_mm_xor_si128() {
	xmm0 = param(0, t128)
	xmm1 = param(16, t128)
	xmm0 = builtin "__builtin_ia32_pxor128" <>(xmm0, xmm1)
	return
}

_mm_setzero_si128() {
	xmm1 = xmm0
	xmm0 = builtin "__builtin_ia32_pxor128" <>(xmm0, xmm1)
	return
}

_mm_shuffle_epi8() {
	xmm0 = param(0, t128)
	xmm1 = param(16, t128)
	xmm0 = builtin "__builtin_ia32_pshufb128" <>(xmm0, xmm1)
	return
}

print_uint8() {
	stack(12, int) = BX
	stack(16, int) = SI
	stack(20, int) = DI
	SI = param(0, int)
	BX = param(4, int)
	DI = 0
    8:	if (DI >=u BX) goto 3
	AX = __stringlit_2 + 0
	CX = int8u[SI + DI + 0]
	stack(0, int) = AX
	stack(4, int) = CX
	call "printf"
	DI = DI + 1
	goto 8
    3:	AX = __stringlit_1 + 0
	stack(0, int) = AX
	call "printf"
	BX = stack(12, int)
	SI = stack(16, int)
	DI = stack(20, int)
	return
}

print_m128i() {
	stack(12, int) = BX
	BX = param(0, int)
	xmm0 = param(16, t128)
	AX = stack(16)
	AX = builtin "__builtin_ia32_storedqu" <>(AX, xmm0)
	AX = __stringlit_3 + 0
	stack(0, int) = AX
	stack(4, int) = BX
	call "printf"
	CX = stack(16)
	AX = 16
	stack(0, int) = CX
	stack(4, int) = AX
	call "print_uint8"
	BX = stack(12, int)
	return
}

bswap16() {
	xmm2 = param(0, t128)
	CX = 15
	int8s[stack(48)] = CX
	AX = 14
	int8s[stack(49)] = AX
	DX = 13
	int8s[stack(50)] = DX
	CX = 12
	int8s[stack(51)] = CX
	DX = 11
	int8s[stack(52)] = DX
	CX = 10
	int8s[stack(53)] = CX
	DX = 9
	int8s[stack(54)] = DX
	CX = 8
	int8s[stack(55)] = CX
	AX = 7
	int8s[stack(56)] = AX
	AX = 6
	int8s[stack(57)] = AX
	DX = 5
	int8s[stack(58)] = DX
	DX = 4
	int8s[stack(59)] = DX
	CX = 3
	int8s[stack(60)] = CX
	AX = 2
	int8s[stack(61)] = AX
	CX = 1
	int8s[stack(62)] = CX
	AX = 0
	int8s[stack(63)] = AX
	xmm0 = int128[stack(48)]
	stack(0, t128) = xmm2
	stack(16, t128) = xmm0
	call "_mm_shuffle_epi8"
	xmm1 = xmm0
	xmm0 = xmm1
	return
}

zero_set_byte() {
	AX = param(0, int)
	CX = param(4, int)
	xmm1 = xmm0
	xmm0 = builtin "__builtin_ia32_pxor128" <>(xmm0, xmm1)
	int128[stack(16)] = xmm0
	DX = stack(16)
	int8s[DX + CX + 0] = AX
	xmm2 = int128[stack(16)]
	xmm0 = xmm2
	return
}

test_xor() {
	stack(36, int) = BX
	BX = param(0, int)
	xmm0 = param(16, t128)
	stack(64, t128) = xmm0
	xmm0 = param(32, t128)
	stack(96, t128) = xmm0
	xmm0 = param(48, t128)
	stack(112, t128) = xmm0
	xmm7 = param(64, t128)
	xmm0 = param(80, t128)
	stack(176, t128) = xmm0
	xmm0 = param(96, t128)
	stack(192, t128) = xmm0
	xmm0 = param(112, t128)
	stack(160, t128) = xmm0
	stack(0, t128) = xmm7
	call "bswap16"
	stack(80, t128) = xmm0
	xmm7 = stack(80, t128)
	stack(0, t128) = xmm7
	call "bswap16"
	stack(48, t128) = xmm0
	xmm4 = stack(96, t128)
	stack(0, t128) = xmm4
	call "bswap16"
	xmm2 = xmm0
	stack(128, t128) = xmm2
	stack(0, t128) = xmm2
	call "bswap16"
	stack(144, t128) = xmm0
	xmm4 = stack(128, t128)
	stack(0, t128) = xmm4
	call "bswap16"
	xmm1 = xmm0
	stack(0, t128) = xmm1
	call "bswap16"
	stack(128, t128) = xmm0
	AX = 0
	stack(0, int) = AX
	xmm2 = stack(64, t128)
	stack(16, t128) = xmm2
	call "print_m128i"
	AX = 1
	stack(0, int) = AX
	xmm1 = stack(96, t128)
	stack(16, t128) = xmm1
	call "print_m128i"
	CX = 2
	stack(0, int) = CX
	xmm3 = stack(112, t128)
	stack(16, t128) = xmm3
	call "print_m128i"
	AX = 3
	stack(0, int) = AX
	xmm0 = stack(80, t128)
	stack(16, t128) = xmm0
	call "print_m128i"
	DX = 4
	stack(0, int) = DX
	xmm3 = stack(48, t128)
	stack(16, t128) = xmm3
	call "print_m128i"
	CX = 5
	stack(0, int) = CX
	xmm2 = stack(144, t128)
	stack(16, t128) = xmm2
	call "print_m128i"
	DX = 6
	stack(0, int) = DX
	xmm4 = stack(128, t128)
	stack(16, t128) = xmm4
	call "print_m128i"
	xmm0 = stack(96, t128)
	xmm1 = stack(48, t128)
	xmm2 = builtin "__builtin_ia32_pxor128" <>(xmm0, xmm1)
	xmm0 = xmm2
	stack(48, t128) = xmm0
	DX = 6
	stack(0, int) = DX
	xmm7 = stack(48, t128)
	stack(16, t128) = xmm7
	call "print_m128i"
	CX = -128
	DX = 14
	stack(0, int) = CX
	stack(4, int) = DX
	call "zero_set_byte"
	stack(80, t128) = xmm0
	AX = 7
	stack(0, int) = AX
	xmm6 = stack(80, t128)
	stack(16, t128) = xmm6
	call "print_m128i"
	xmm5 = stack(80, t128)
	xmm6 = stack(48, t128)
	xmm6 = builtin "__builtin_ia32_pxor128" <>(xmm6, xmm5)
	xmm0 = stack(112, t128)
	xmm6 = builtin "__builtin_ia32_pxor128" <>(xmm6, xmm0)
	xmm5 = stack(64, t128)
	xmm6 = builtin "__builtin_ia32_pxor128" <>(xmm6, xmm5)
	xmm7 = stack(96, t128)
	xmm6 = builtin "__builtin_ia32_pxor128" <>(xmm6, xmm7)
	xmm3 = stack(48, t128)
	xmm6 = builtin "__builtin_ia32_pxor128" <>(xmm6, xmm3)
	stack(48, t128) = xmm6
	AX = 8
	stack(0, int) = AX
	xmm4 = stack(48, t128)
	stack(16, t128) = xmm4
	call "print_m128i"
	xmm0 = stack(144, t128)
	stack(80, t128) = xmm0
	CX = 9
	stack(0, int) = CX
	xmm6 = stack(80, t128)
	stack(16, t128) = xmm6
	call "print_m128i"
	if (BX !=s 16) goto 47
	xmm2 = stack(192, t128)
	xmm3 = stack(80, t128)
	xmm3 = builtin "__builtin_ia32_pxor128" <>(xmm3, xmm2)
	stack(80, t128) = xmm3
   47:	AX = 10
	stack(0, int) = AX
	xmm2 = stack(80, t128)
	stack(16, t128) = xmm2
	call "print_m128i"
	DX = 11
	stack(0, int) = DX
	xmm3 = stack(160, t128)
	stack(16, t128) = xmm3
	call "print_m128i"
	xmm5 = stack(160, t128)
	xmm3 = stack(80, t128)
	xmm3 = builtin "__builtin_ia32_pxor128" <>(xmm3, xmm5)
	xmm6 = stack(112, t128)
	xmm3 = builtin "__builtin_ia32_pxor128" <>(xmm3, xmm6)
	xmm1 = stack(64, t128)
	xmm3 = builtin "__builtin_ia32_pxor128" <>(xmm3, xmm1)
	xmm4 = stack(96, t128)
	xmm3 = builtin "__builtin_ia32_pxor128" <>(xmm3, xmm4)
	xmm5 = stack(80, t128)
	xmm3 = builtin "__builtin_ia32_pxor128" <>(xmm3, xmm5)
	xmm1 = stack(48, t128)
	xmm1 = builtin "__builtin_ia32_pxor128" <>(xmm1, xmm3)
	stack(48, t128) = xmm1
	AX = 12
	stack(0, int) = AX
	xmm1 = stack(48, t128)
	stack(16, t128) = xmm1
	call "print_m128i"
	xmm6 = stack(48, t128)
	xmm0 = stack(176, t128)
	xmm6 = builtin "__builtin_ia32_pxor128" <>(xmm6, xmm0)
	xmm0 = xmm6
	BX = stack(36, int)
	return
}

main() {
	stack(132, int) = BX
	CX = 286335522
	DX = 1164417724
	AX = 305419896
	BX = -1412567278
	int32[stack(144)] = CX
	int32[stack(148)] = DX
	int32[stack(152)] = AX
	int32[stack(156)] = BX
	xmm3 = int128[stack(144)]
	DX = 1164417724
	CX = 286335522
	BX = -1412567278
	AX = 305419896
	int32[stack(144)] = DX
	int32[stack(148)] = CX
	int32[stack(152)] = BX
	int32[stack(156)] = AX
	xmm2 = int128[stack(144)]
	BX = -1107983496
	AX = 2015565320
	CX = 538523681
	DX = -1486497090
	int32[stack(144)] = BX
	int32[stack(148)] = AX
	int32[stack(152)] = CX
	int32[stack(156)] = DX
	xmm1 = int128[stack(144)]
	BX = 1770271777
	AX = 1164417724
	CX = 305419896
	DX = 153172139
	int32[stack(144)] = BX
	int32[stack(148)] = AX
	int32[stack(152)] = CX
	int32[stack(156)] = DX
	xmm5 = int128[stack(144)]
	CX = -889312895
	DX = 1164417724
	BX = 691540802
	AX = 1194952049
	int32[stack(144)] = CX
	int32[stack(148)] = DX
	int32[stack(152)] = BX
	int32[stack(156)] = AX
	xmm4 = int128[stack(144)]
	BX = 154616595
	DX = 1164417724
	CX = -1991821167
	AX = 305688868
	int32[stack(144)] = BX
	int32[stack(148)] = DX
	int32[stack(152)] = CX
	int32[stack(156)] = AX
	xmm6 = int128[stack(144)]
	CX = -338032249
	AX = 1164417724
	DX = -1845194446
	BX = 692523043
	int32[stack(144)] = CX
	int32[stack(148)] = AX
	int32[stack(152)] = DX
	int32[stack(156)] = BX
	xmm0 = int128[stack(144)]
	CX = 16
	stack(0, int) = CX
	stack(16, t128) = xmm3
	stack(32, t128) = xmm2
	stack(48, t128) = xmm1
	stack(64, t128) = xmm5
	stack(80, t128) = xmm4
	stack(96, t128) = xmm6
	stack(112, t128) = xmm0
	call "test_xor"
	xmm7 = xmm0
	AX = 999
	stack(0, int) = AX
	stack(16, t128) = xmm7
	call "print_m128i"
	AX = 0
	BX = stack(132, int)
	return
}

